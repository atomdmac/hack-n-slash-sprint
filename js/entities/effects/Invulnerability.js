define(
['jaws', 'DATABASE', 'entities/entity', 'lib/SAT'],
function (jaws, DATABASE, Entity, SAT) {

function Invulnerability (options) {
	// Merge options
	this.options = $.extend({
						width: 1,
						height: 1,
						scale: 1,
						anchor: [0.5, 0.5],
						radius: 1,
						x: options.target.x,
						y: options.target.y
					}, options);

	// Call super-class.
	Entity.call(this, this.options);
	
	this.onFinish   = this.options.onFinish;
	
	// State
	this.duration     = 30;
	this.currentTime  = 0;
	
	// These options will not be able to be set if this constructor is being
	// called as a means to extend it.
	if(this.options){
		this.target = this.options.target;
	}
}

Invulnerability.prototype = Object.create(Entity.prototype);

Invulnerability.prototype.update = function () {
	// Step forward in time.
	this.currentTime += 1;
	
	this.target.invulnerable = true;
	// Check to see if the attack has finished yet or not.
	if(this.currentTime >= this.duration) {
		this.target.invulnerable = false;
		this.onFinish();
	}
};

return Invulnerability;

});
